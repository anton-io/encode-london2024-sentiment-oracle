#!/usr/bin/env python3

# This file contains a multitude of functions to operate the smart contract.

from config import *


def _exec_transaction(transaction):
    # Helper function to execute the transaction.
    try:
        # Sign the transaction with your private key
        signed_transaction = web3.eth.account.sign_transaction(transaction, PKEY)

        # Send the signed transaction
        tx_hash = web3.eth.send_raw_transaction(signed_transaction.rawTransaction)

        # Wait for the transaction to be mined
        receipt = web3.eth.wait_for_transaction_receipt(tx_hash)
        print(f"receipt: {receipt}")
        print(f"Transaction successful with hash: {tx_hash.hex()}")

    except Exception as e:
        print(f"Error with transaction: {e}")


def get_news_sentiment(year, month, day):
    try:
        # Call the 'getLotteryActive' to check lottery state.
        sentiment = contract.functions.getNewsSentiment(year, month, day).call()
        print(f"Sentiment for {year}/{month}/{day} was {sentiment}")
        return sentiment
    except Exception as e:
        print(f"Error reading sentiment: {e}")


def set_news_sentiment(year, month, day, positive, neutral, negative):
    transaction = contract.functions.updateNewsSentiment(
        year, month, day, positive, neutral, negative
    ).build_transaction({
        'gas': 300000,                 # Gas limit.
        'gasPrice': web3.eth.gas_price,  # Current gas price.
        'nonce': web3.eth.get_transaction_count(user_address),
        'from': user_address,
    })
    _exec_transaction(transaction)


def print_ftso_prices():
    ADDR_FEEDS = "0x3d893C53D9e8056135C26C8c638B76C8b60Df726"
    ID_FEEDS = [
        "0x01464c522f55534400000000000000000000000000",  # FLR/USD
        "0x014254432f55534400000000000000000000000000",  # BTC/USD
        "0x014554482f55534400000000000000000000000000",  # ETH/USD
    ]
    # ABI for FtsoV2
    ABI = ('[{"inputs":[{"internalType":"bytes21[]","name":"_feedIds","type":"bytes21[]"}],"name":"getFeedsById",'
           '"outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"int8[]","name":"","type":"int8[]"},'
           '{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"payable","type":"function"}]')  # noqa: E501

    # Set up contract instance.
    ftsov2 = web3.eth.contract(address=web3.to_checksum_address(ADDR_FEEDS), abi=ABI)

    # Fetch current feeds.
    feeds, decimals, timestamp = ftsov2.functions.getFeedsById(ID_FEEDS).call()

    # Show results.
    print("TimeStamp:", timestamp)
    names = ['FLR/USD', 'BTC/USD', 'ETH/USD']
    for i, feed in enumerate(feeds):
        print(f"{names[i]}: {feed / 10**decimals[i]:12.5f}")

    return feeds, decimals, timestamp, names


def validate_core_functions():
    get_news_sentiment(2024, 10, 26)
    set_news_sentiment(2024, 10, 26, 2, 3, 5)
    get_news_sentiment(2024, 10, 26)


def main():
    pass
    # Check price feeds using FTSO.
    # print_ftso_prices()
    # Enable/disable as a way to test:
    # validate_core_functions()


if __name__ == "__main__":
    main()



